<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Product Search</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; background: #f5f5f5; color: #333; }
        .container { max-width: 1000px; margin: 0 auto; padding: 20px; }
        header { text-align: center; margin-bottom: 30px; }
        header h1 { color: #2c3e50; margin-bottom: 10px; }
        .chat-container { background: white; border-radius: 10px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        #messages { height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 15px; margin-bottom: 15px; border-radius: 5px; }
        .message { margin-bottom: 15px; padding: 10px; border-radius: 5px; }
        .user-message { background-color: #007bff; color: white; margin-left: 20%; }
        .bot-message { background-color: #e9ecef; margin-right: 20%; }
        .input-container { display: flex; gap: 10px; }
        .input-container input { flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 5px; font-size: 16px; }
        .input-container button { padding: 12px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
        .input-container button:hover { background-color: #0056b3; }
        .products-container { background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .product { border: 1px solid #ddd; border-radius: 5px; padding: 15px; margin-bottom: 15px; background: #f8f9fa; }
        .product h3 { color: #2c3e50; margin-bottom: 10px; }
        .product-price { font-weight: bold; color: #28a745; font-size: 18px; margin-bottom: 5px; }
        .product-category { background-color: #6c757d; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; display: inline-block; margin-bottom: 10px; }
        .loading { text-align: center; padding: 20px; color: #6c757d; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ðŸ¤– AI Product Search</h1>
            <p>Type your message or search for products!</p>
        </header>
        
        <div class="chat-container">
            <div id="messages"></div>
            <div class="input-container">
                <input type="text" id="messageInput" placeholder="Ask me anything or search for products...">
                <button id="sendButton">Send</button>
            </div>
        </div>
        
        <div class="products-container">
            <h2>Products</h2>
            <div id="products"></div>
        </div>
    </div>
 
    <script>
        class AIProductSearch {
            constructor() {
                this.messageInput = document.getElementById('messageInput');
                this.sendButton = document.getElementById('sendButton');
                this.messages = document.getElementById('messages');
                this.products = document.getElementById('products');
                this.bindEvents();
            }
            
            bindEvents() {
                this.sendButton.addEventListener('click', () => this.handleInput());
                this.messageInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.handleInput();
                });
            }
            
            // In your unified HTML file, update the handleInput method:
            async handleInput() {
                const input = this.messageInput.value.trim();
                if (!input) return;
                
                this.addMessage(input, 'user');
                this.messageInput.value = '';
                this.sendButton.disabled = true;
                
                try {
                    const response = await fetch('/api/chat/', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: input })
                    });
                    
                    const data = await response.json();
                    
                    // Show intent detection result
                    const confidence = isNaN(data.confidence) ? 0 : Math.round(data.confidence * 100);
                    const intentBadge = `<div class="intent-badge">${data.intent} (${confidence}%)</div>`;
                    // const intentBadge = `<div class="intent-badge">${data.intent} (${Math.round(data.confidence * 100)}%)</div>`;
                    this.addMessage(intentBadge + data.response, 'bot');
                    
                    // If product intent, also show products in the products section
                    if (data.intent.includes('product')) {
                        this.searchProducts(input);
                    }
                    
                } catch (error) {
                    this.addMessage('Sorry, I encountered an error. Please try again.', 'bot');
                } finally {
                    this.sendButton.disabled = false;
                }
            }
            
            addMessage(text, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}-message`;
                messageDiv.innerHTML = text;
                this.messages.appendChild(messageDiv);
                this.messages.scrollTop = this.messages.scrollHeight;
            }
            
            async searchProducts(query) {
                this.products.innerHTML = '<div class="loading">Searching products...</div>';
                
                try {
                    const response = await fetch(`/api/products/search?q=${encodeURIComponent(query)}`);
                    const products = await response.json();
                    this.displayProducts(products);
                } catch (error) {
                    this.products.innerHTML = '<div class="loading">Error searching products</div>';
                }
            }
            
            displayProducts(products) {
                if (products.length === 0) {
                    this.products.innerHTML = '<div class="loading">No products found</div>';
                    return;
                }
                
                const productsHtml = products.map(product => `
                    <div class="product">
                        <h3>${product.name || 'Unknown Product'}</h3>
                        <div class="product-price">$${product.price || 'N/A'}</div>
                        <div class="product-category">${product.category || 'Uncategorized'}</div>
                        <p>${product.description || 'No description available'}</p>
                    </div>
                `).join('');
                
                this.products.innerHTML = productsHtml;
            }
        }
 
        document.addEventListener('DOMContentLoaded', () => {
            new AIProductSearch();
        });
    </script>
</body>
</html>